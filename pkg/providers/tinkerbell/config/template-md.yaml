apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: {{.clusterName}}
    pool: {{.workerNodeGroupName}}
  name: {{.clusterName}}-{{.workerNodeGroupName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  clusterName: {{.clusterName}}
  replicas: {{.workerReplicas}}
  selector:
    matchLabels: {}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: {{.clusterName}}
        pool: {{.workerNodeGroupName}}
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: {{.workloadkubeadmconfigTemplateName}}
      clusterName: {{.clusterName}}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: TinkerbellMachineTemplate
        name: {{.workloadTemplateName}}
      version: {{.kubernetesVersion}}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: TinkerbellMachineTemplate
metadata:
  name: {{.workloadTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    {{- if and .workertemplateOverride (ne .format "")}}
    spec:
      hardwareAffinity:
        required:
        - labelSelector:
            matchLabels: {{ range $key, $value := .hardwareSelector}}
              {{ $key }}: {{ $value}}
            {{- end }}
      templateOverride: |
{{.workertemplateOverride | indent 8}}
    {{- end}}
    {{- if (eq .workertemplateOverride "") }}
    spec: {}
    {{- end }}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{.workloadkubeadmconfigTemplateName}}
  namespace: {{.eksaSystemNamespace}}
spec:
  template:
    spec:
      files:
      - content: |
          apiVersion: kubelet.config.k8s.io/v1alpha1
          kind: CredentialProviderConfig
          providers:
            - name: ecr-credential-provider
              matchImages: 
                - "*.dkr.ecr.*.amazonaws.com"
              defaultCacheDuration: "12h"
              apiVersion: credentialprovider.kubelet.k8s.io/v1alpha1
              env:
                - name: AWS_PROFILE
                  value: eksa-packages
                - name: AWS_CONFIG_FILE
                  value: /root/aws-ecr-creds
                - name: PATH
                  value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                - name: HOME
                  value: /root
        owner: root:root
        path: /etc/kubernetes/credential-provider-config.yaml
        permissions: "0600"
      - contentFrom:
          secret:
            key: config
            name: aws-ecr-cred-config
        owner: root:root
        path: /root/aws-ecr-creds
        permissions: "0600"
      preKubeadmCommands:
        - sudo mkdir -p /usr/libexec/kubernetes/kubelet-plugins/credential-providers
        - sudo wget -O /usr/libexec/kubernetes/kubelet-plugins/credential-providers/ecr-credential-provider https://github.com/junshun/eks-anywhere-packages/releases/download/v0.1.9/ecr-credential-provider
        - sudo chmod +x /usr/libexec/kubernetes/kubelet-plugins/credential-providers/ecr-credential-provider
      joinConfiguration:
{{- if (eq .format "bottlerocket") }}
        pause:
          imageRepository: {{.pauseRepository}}
          imageTag: {{.pauseVersion}}
        bottlerocketBootstrap:
          imageRepository: {{.bottlerocketBootstrapRepository}}
          imageTag: {{.bottlerocketBootstrapVersion}}
{{- end }}
        nodeRegistration:
{{- if .workerNodeGroupTaints }}
          taints:
{{- range .workerNodeGroupTaints}}
            - key: {{ .Key }}
              value: {{ .Value }}
              effect: {{ .Effect }}
{{- if .TimeAdded }}
              timeAdded: {{ .TimeAdded }}
{{- end }}
{{- end }}
{{- end }}
          kubeletExtraArgs:
            provider-id: PROVIDER_ID
            read-only-port: "0"
            anonymous-auth: "false"
{{- if .kubeletExtraArgs }}
{{ .kubeletExtraArgs.ToYaml | indent 12 }}
{{- end }}
      users:
      - name: {{.workerSshUsername}}
        sshAuthorizedKeys:
        - '{{.workerSshAuthorizedKey}}'
        sudo: ALL=(ALL) NOPASSWD:ALL
      format: {{.format}}
